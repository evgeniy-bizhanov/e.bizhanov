/**
 –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π. –•—Ä–∞–Ω–∏—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –∏ —Ä–∞–∑—Ä–µ—à–∞–µ—Ç –∏—Ö
 */

// MARK: - –û—à–∏–±–∫–∏
/// –û—à–∏–±–∫–∏ –≤–æ–∑–Ω–∏–∫–∞—é—â–∏–µ –ø—Ä–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
enum ContainerError: Error {
    case notFound(Any.Type)
    case castFailure(Any.Type)
}

// –ß—Ç–æ —Ç–æ —Å—Ç—Ä–∞—à–Ω–æ–µ –Ω–∞–≤–æ—Ä–æ—Ç–∏–ª —è ü§î
/// –†–µ–∑—É–ª—å—Ç–∞—Ç —Ä–∞–±–æ—Ç—ã —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ DI-–∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
enum Result<T: ScopeResolver> {
    case success(T, Key)
    
    func inScope(_ scope: Scope) {
        switch self {
        case .success(let target, let key):
            target.inScope(scope, key: key)
        }
    }
}

// MARK: - Container
/// –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
final class Container: AbstractContainer {

    typealias Instance = Any
    
    typealias Factory = (
        `init`: Initializer,
        scope: Scope,
        instance: Instance?
    )
    
    private var dictionary = [Key: Factory]()
    
    /**
     –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π –≤ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–µ
     
     - Parameter service: –°–µ—Ä–≤–∏—Å –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ—Ç—Å—è —Ñ–∞–±—Ä–∏–∫–∞
     - Parameter factory: –§–∞–±—Ä–∏–∫–∞, —Å –ø–æ–º–æ—â—å—é –∫–æ—Ç–æ—Ä–æ–π —Ä–∞–∑—Ä–µ—à–∞–µ—Ç—Å—è –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç—å
     */
    @discardableResult
    func register(_ service: Any.Type, factory: @escaping Initializer) -> Result<Container> {
        let key = Key(service)
        let value: Factory = (factory, .default, nil)

        dictionary[key] = value

        return .success(self, key)
    }
    
    // –ù–µ —É–≤–µ—Ä–µ–Ω –Ω–∞ —Å—á–µ—Ç —Å–∏–Ω–≥–ª—Ç–æ–Ω–∞, –Ω–æ –ø—É—Å—Ç—å –ø–æ–∫–∞ –±—É–¥–µ—Ç —Ç–∞–∫,
    // –Ω–∞–≤–µ—Ä–Ω–æ–µ –Ω–∞–¥–æ –∏–Ω—Å—Ç–∞–Ω—Ü–∏—Ä–æ–≤–∞—Ç—å –≤ –Ω–∞—á–∞–ª–µ –∑–∞–ø—É—Å–∫–∞, —á—Ç–æ –±—ã –Ω–µ –±—ã–ª–æ —Å–æ–±–ª–∞–∑–Ω–∞
    // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –µ—â–µ –≥–¥–µ —Ç–æ –≤ –∫–æ–¥–µ
    private init() {}
    public static let shared = Container() as AbstractContainer & Resolver
}

// MARK: - ScopeResolver
extension Container: ScopeResolver {
    func inScope(_ scope: Scope, key: Key) {
        dictionary[key]?.scope = scope
    }
}

// MARK: - Resolver
extension Container: Resolver {
    
    func resolve<T>(service: T.Type) throws -> T {
        let key = Key(service)
        
        guard var factory = dictionary[key] else {
            throw ContainerError.notFound(service)
        }
        
        guard let instance = try (factory.instance ?? factory.init(self)) as? T else {
            throw ContainerError.castFailure(service)
        }
        
        if factory.scope == .singleton {
            factory.instance = instance
        }
        
        return instance
    }
}
